package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                events.add(new CompareEvent<>(j, j + 1));
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    swap(arr, j, j + 1);
                    events.add(new SwapEvent<>(j, j + 1));
                }
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        for (int i = 0; i < arr.length - 1; i ++) {
            int minIndex = i;
            for (int j = i; j < arr.length; j++) {
                events.add(new CompareEvent<>(j, minIndex));
                if (arr[j].compareTo(arr[minIndex]) < 0) {
                    minIndex = j;
                }
            }
            swap(arr, minIndex, i);
            events.add(new SwapEvent<>(minIndex, i));
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        for (int i = 1; i < arr.length; i++) {
            T key = arr[i]; 
            int j = i - 1;
            
            while (j >= 0) {
                events.add(new CompareEvent<>(j, j + 1));
                if (arr[j].compareTo(key) > 0) {
                    arr[j + 1] = arr[j]; 
                    events.add(new CopyEvent<>(j + 1, arr[j]));
                    j--;
                } else {
                    break;
                }
            }

            arr[j + 1] = key;
            events.add(new CopyEvent<>(j + 1, key));
        }
        return events;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        mergeSortHelper(arr, 0, arr.length, events);
        return events;
    }
    
    private static <T extends Comparable<? super T>> void mergeSortHelper(T[] arr, int start, int end, List<SortEvent<T>> events) {
        if (end - start <= 1) {
            return;
        }
    
        int mid = (start + end) / 2;
        mergeSortHelper(arr, start, mid, events);
        mergeSortHelper(arr, mid, end, events);
        merge(arr, start, mid, end, events);
    }
    
    private static <T extends Comparable<? super T>> void merge(T[] arr, int start, int mid, int end, List<SortEvent<T>> events) {
        List<T> temp = new ArrayList<>();
        int i = start;
        int j = mid;
    
        while (i < mid && j < end) {
            events.add(new CompareEvent<>(i, j));
            if (arr[i].compareTo(arr[j]) <= 0) {
                temp.add(arr[i++]);
            } else {
                temp.add(arr[j++]);
            }
        }
    
        while (i < mid) {
            temp.add(arr[i++]);
        }
        while (j < end) {
            temp.add(arr[j++]);
        }
    
        for (int k = 0; k < temp.size(); k++) {
            arr[start + k] = temp.get(k);
            events.add(new CopyEvent<>(start + k, temp.get(k)));
        }
    }
    
    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        quickSortHelper(arr, 0, arr.length - 1, events);
        return events;
    }

    private static <T extends Comparable<? super T>> void quickSortHelper(T[] arr, int low, int high, List<SortEvent<T>> events) {
        if (low < high) {
            int pivotIndex = pivotGetter(arr, low, high, events);
            quickSortHelper(arr, low, pivotIndex - 1, events); // Sort left half
            quickSortHelper(arr, pivotIndex + 1, high, events); // Sort right half
        }
    }

    private static <T extends Comparable<? super T>> int pivotGetter(T[] arr, int low, int high, List<SortEvent<T>> events) {
        int pivotIndex = medianOfThree(arr, low, high, events);
        T pivot = arr[pivotIndex];

        // Move pivot to end
        swap(arr, pivotIndex, high);
        events.add(new SwapEvent<>(pivotIndex, high));

        int i = low - 1;

        for (int j = low; j < high; j++) {
            events.add(new CompareEvent<>(j, pivotIndex));
            if (arr[j].compareTo(pivot) <= 0) {
                i++;
                swap(arr, i, j);
                events.add(new SwapEvent<>(i, j));
            }
        }

        // Place pivot in correct position
        swap(arr, i + 1, high);
        events.add(new SwapEvent<>(i + 1, high));
        return i + 1;
    }

    private static <T extends Comparable<? super T>> int medianOfThree(T[] arr, int low, int high, List<SortEvent<T>> events) {
        int mid = low + (high - low) / 2;

        // Move the median to index mid
        events.add(new CompareEvent<>(low, mid));
        if (arr[low].compareTo(arr[mid]) > 0) {
            swap(arr, low, mid);
            events.add(new SwapEvent<>(low, mid));
        }

        events.add(new CompareEvent<>(low, high));
        if (arr[low].compareTo(arr[high]) > 0) {
            swap(arr, low, high);
            events.add(new SwapEvent<>(low, high));

        }

        events.add(new CompareEvent<>(mid, high));
        if (arr[mid].compareTo(arr[high]) > 0) {
            swap(arr, mid, high);
            events.add(new SwapEvent<>(mid, high));

        }
        return mid;
    }

    public static <T> void eventSort(T[] l, List<SortEvent<T>> events) {
        for (int i = 0; i < events.size(); i ++) {
            events.get(i).apply(l);
        }
    }

}
